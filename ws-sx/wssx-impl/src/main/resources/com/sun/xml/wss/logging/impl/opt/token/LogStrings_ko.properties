#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 2010 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
# or packager/legal/LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at packager/legal/LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

# ResourceBundle properties file for optimized tokens

WSS1801.bst.creation.failed = WSS1801: BinarySecurityToken\uC744 \uC0DD\uC131\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.

WSS1802.wrong.tokeninclusion.policy = WSS1802: IncludeToken \uC815\uCC45\uC774 Never\uC774\uACE0 WSSAssertion\uC5D0 KeyIdentifier/Thumbprint \uCC38\uC870 \uC720\uD615\uC774 false\uB85C \uC124\uC815\uB418\uC5B4 \uC788\uC2B5\uB2C8\uB2E4.

WSS1803.unsupported.reference.type = WSS1803: \uCC38\uC870 \uC720\uD615 {0}\uC740(\uB294) \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.

WSS1804.wrong.encrypted.key = WSS1804: encryptedKey Id\uC758 \uAE38\uC774\uAC00 0\uC785\uB2C8\uB2E4.

WSS1805.derivedkeys.with.asymmetricbinding.unsupported = WSS1805: X509Token \uC815\uCC45\uC5D0\uC11C DerivedKeys\uB97C \uC0AC\uC6A9\uD55C \uBE44\uB300\uCE6D \uBC14\uC778\uB529\uC740 \uC544\uC9C1 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.

WSS1806.error.generating.symmetric.key: WSS1806: \uB300\uCE6D \uD0A4\uB97C \uC0DD\uC131\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4. \uC81C\uACF5\uB41C \uC54C\uACE0\uB9AC\uC998\uC774 \uBD80\uC815\uD655\uD569\uB2C8\uB2E4.

WSS1807.cert.proofKey.null.issuedtoken: WSS1807: \uC694\uCCAD\uC790 \uC778\uC99D\uC11C \uBC0F \uC99D\uBA85 \uD0A4\uAC00 \uBC1C\uD589\uB41C \uD1A0\uD070\uC5D0 \uB300\uD574 \uBAA8\uB450 \uB110\uC785\uB2C8\uB2E4.

WSS1808.id.notset.encrypted.issuedtoken: WSS1808: \uC554\uD638\uD654\uB41C IssuedToken\uC5D0 Id \uC18D\uC131\uC774 \uC124\uC815\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4.

WSS1809.sct.not.found: WSS1809: SecureConversation \uD1A0\uD070\uC744 \uC138\uC158\uC5D0\uC11C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.

WSS1810.null.privatekey.saml: WSS1810: \uC11C\uBA85\uC5D0 \uC0AC\uC6A9\uB41C SAML \uC815\uCC45\uC5D0 \uB300\uD55C \uC804\uC6A9 \uD0A4 \uBC14\uC778\uB529 \uB0B4\uC5D0 \uC804\uC6A9 \uD0A4\uAC00 \uB110\uB85C \uC124\uC815\uB418\uC5B4 \uC788\uC2B5\uB2C8\uB2E4.

WSS1811.null.saml.assertion: WSS1811: \uC11C\uBA85\uC5D0 \uC0AC\uC6A9\uB41C SAML \uBC14\uC778\uB529\uC5D0 \uB300\uD574 SAML \uAC80\uC99D\uC774 \uB110\uB85C \uC124\uC815\uB418\uC5B4 \uC788\uC2B5\uB2C8\uB2E4.

WSS1812.missing.cert.samlassertion: WSS1812: SAML \uAC80\uC99D\uC758 SubjectConfirmation\uC5D0\uC11C \uD0A4\uC5D0 \uD574\uB2F9\uD558\uB294 \uC778\uC99D\uC11C\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.

WSS1813.unsupported.embeddedreferencetype.saml = WSS1813: SAML \uAC80\uC99D\uC5D0 \uB300\uD55C \uB0B4\uC7A5\uB41C \uCC38\uC870 \uC720\uD615\uC740 \uC544\uC9C1 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.

WSS1814.error.encoding.certificate = WSS1814: X509 \uC778\uC99D\uC11C\uB97C \uC778\uCF54\uB529\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.

WSS1815.error.processing.str = WSS1815: \uC218\uC2E0 \uBA54\uC2DC\uC9C0\uC758 SecurityTokenReference\uB97C \uCC98\uB9AC\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.

# {0} - "Direct Reference"/"KeyIdentifier"/"Issuer Serial"
WSS1816.error.reference.mechanism = WSS1816: {0}\uC744(\uB97C) \uBD84\uC11D\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.

# {0} - "Direct Reference"/"KeyIdentifier"/"Issuer Serial"
WSS1817.error.reference.canwriter = WSS1817: \uD45C\uC900\uD654\uB41C \uAE30\uB85D \uC7A5\uCE58\uB85C {0}\uC744(\uB97C) \uC4F0\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.

WSS1818.algorithm.notset.derivedkey = WSS1818: \uD0A4 \uD30C\uC0DD\uC744 \uC704\uD55C \uC54C\uACE0\uB9AC\uC998\uC774 \uC124\uC815\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4.

WSS1819.error.symmkey.derivedkey = WSS1819: DerivedKeyToken\uC5D0 \uB300\uD55C SymmetricKey\uB97C \uC0DD\uC131\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.

WSS1820.error.nonce.derivedkey = WSS1820: ID\uB85C DerivedKey\uC5D0 \uB300\uD55C nonce\uB97C \uB514\uCF54\uB529\uD558\uB294 \uC911 \uC624\uB958 \uBC1C\uC0DD: {0}

WSS1821.invalid.dkt.token = WSS1821: \uBD80\uC801\uD569\uD55C DerivedKey \uD1A0\uD070\uC785\uB2C8\uB2E4. \uC624\uD504\uC14B \uBC0F \uC138\uB300\uAC00 \uB458 \uB2E4 \uC9C0\uC815\uB418\uC5C8\uC2B5\uB2C8\uB2E4.

WSS1822.kerberos.always.notallowed = WSS1822: IncludeToken Always \uBC0F AlwaysToRecipient\uB294 Kerberos \uD1A0\uD070\uC5D0 \uD5C8\uC6A9\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.

WSS1823.keyPair.proofKey.null.issuedtoken: WSS1823: \uC9C0\uC6D0\uD558\uB294 \uD1A0\uD070(KeyValueToken \uB610\uB294 RsaToken)\uC5D0 \uB300\uD55C \uC99D\uBA85 \uD0A4 \uBC0F RSA KeyPair\uAC00 \uBC1C\uD589\uB41C \uD1A0\uD070\uC5D0 \uB300\uD574 \uBAA8\uB450 \uB110\uC785\uB2C8\uB2E4.

# 1850 onwards for FINEST, INFO and WARNING messages

WSS1851.referencetype.x509.token = WSS1851: X509 \uD1A0\uD070\uC5D0 \uB300\uD55C \uCC38\uC870 \uC720\uD615: {0}

WSS1852.keyIdentifier.empty= WSS1852: KeyIdentifier \uAC12\uC740 \uBE44\uC6CC \uB458 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4. \uAC00\uB2A5\uD55C \uC6D0\uC778: \uC0AC\uC6A9 \uC911\uC778 \uC778\uC99D\uC11C \uBC84\uC804\uC774 SubjectKeyIdentifier\uB97C \uC9C0\uC6D0\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.

WSS1853.referencetype.kerberos.token = WSS1853: Kerberos \uD1A0\uD070\uC5D0 \uB300\uD55C \uCC38\uC870 \uC720\uD615: {0}

WSS1854.two.tokens.with.sameID=WSS1854: \uB3D9\uC77C\uD55C ID \uC18D\uC131\uC744 \uAC00\uC9C4 \uB450 \uAC1C\uC758 \uD1A0\uD070\uC744 \uBC1C\uACAC\uD588\uC2B5\uB2C8\uB2E4.

WSS1855.xml.stream.reader.error = WSS1855: getKey \uB3D9\uC548 xml \uC2A4\uD2B8\uB9BC \uC77D\uAE30 \uC7A5\uCE58 \uC608\uC678 \uC0AC\uD56D

WSS1856.null.usernametoken = WSS: \uB110 usernametoken
