#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 2010 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
# or packager/legal/LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at packager/legal/LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

#Error codes WSS 1400-1499 reserved for filter



WSS1400.nousername.found=WSS1400: \u627E\u4E0D\u5230\u7528\u6237\u540D\u6807\u8BB0, \u4E0D\u6EE1\u8DB3\u63A5\u6536\u65B9\u8981\u6C42

WSS1401.morethanone.username.found=WSS1401: \u627E\u5230\u591A\u4E2A\u7528\u6237\u540D\u6807\u8BB0, \u4E0D\u6EE1\u8DB3\u63A5\u6536\u65B9\u8981\u6C42

WSS1402.error.posthoc=WSS1402: \u5185\u90E8\u9519\u8BEF: \u4EE5 POSTHOC \u6A21\u5F0F\u8C03\u7528\u4E86 UsernameTokenFilter

WSS1403.import.username.token=WSS1403: \u5BFC\u5165\u7528\u6237\u540D\u53E3\u4EE4\u6807\u8BB0\u65F6\u51FA\u73B0\u5F02\u5E38\u9519\u8BEF

WSS1404.notmet.digested=WSS1404: \u4E0D\u6EE1\u8DB3\u6458\u8981\u53E3\u4EE4\u7684\u63A5\u6536\u65B9\u8981\u6C42

WSS1405.notmet.plaintext=WSS1405: \u4E0D\u6EE1\u8DB3\u7EAF\u6587\u672C\u53E3\u4EE4\u7684\u63A5\u6536\u65B9\u8981\u6C42, \u6536\u5230\u7684\u6807\u8BB0\u5DF2\u5177\u6709\u53E3\u4EE4\u6458\u8981

WSS1406.notmet.nonce=WSS1406: \u4E0D\u6EE1\u8DB3\u5373\u65F6\u5BC6\u7801\u7684\u63A5\u6536\u65B9\u8981\u6C42

WSS1407.notmet.nononce=WSS1407: \u4E0D\u6EE1\u8DB3\u5373\u65F6\u5BC6\u7801\u7684\u63A5\u6536\u65B9\u8981\u6C42, \u63A5\u6536\u65B9\u6807\u8BB0\u4E2D\u6307\u5B9A\u4E86\u5373\u65F6\u5BC6\u7801



WSS1408.failed.sender.authentication=WSS1408: UsernameToken \u9A8C\u8BC1\u5931\u8D25

WSS1408.diag.cause.1=\u6807\u8BB0\u4E2D\u7684\u7528\u6237\u540D/\u53E3\u4EE4\u5BF9\u65E0\u6548



WSS1409.invalid.username.token=WSS1409: UsernameToken \u65E0\u6548, \u7F3A\u5C11 nonce \u548C created \u5C5E\u6027



WSS1410.error.creating.usernametoken=WSS1410: \u672A\u8BBE\u7F6E\u7528\u6237\u540D

WSS1410.diag.cause.1=\u672A\u8BBE\u7F6E\u7528\u6237\u540D

WSS1410.diag.check.1=\u786E\u4FDD\u5DF2\u901A\u8FC7\u914D\u7F6E\u6587\u4EF6\u6216\u56DE\u8C03\u5904\u7406\u7A0B\u5E8F\u4F20\u9012\u7528\u6237\u540D



WSS1411.unableto.dump.soapmessage=WSS1411: \u65E0\u6CD5\u8F6C\u50A8\u6D88\u606F{0}



WSS1412.error.processing.dynamicpolicy=WSS1412: \u5904\u7406\u52A8\u6001\u7B56\u7565{0}\u65F6\u51FA\u9519



WSS1413.error.extracting.certificate=WSS1413: \u63D0\u53D6\u8BC1\u4E66\u65F6\u51FA\u9519



WSS1414.error.extracting.symmetrickey=WSS1414: \u63D0\u53D6\u5BF9\u79F0\u5BC6\u94A5{0}\u65F6\u51FA\u9519



WSS1415.saml.assertion.notset=WSS1415: CallbackHandler \u672A\u8BBE\u7F6E SAML \u65AD\u8A00\u7528\u4E8E\u52A0\u5BC6\u5904\u7406



WSS1416.unsupported.keybinding=WSS1416: \u4E0D\u652F\u6301 X509CertificateBinding \u7684 KeyBinding



WSS1417.exception.processing.signature=WSS1417: \u5904\u7406\u7B7E\u540D{0}\u65F6\u51FA\u9519



WSS1418.saml.info.notset=WSS1418: CallbackHandler \u672A\u5728\u7B56\u7565\u4E2D\u8BBE\u7F6E SAML \u65AD\u8A00\u548C SAML AuthorityBinding \u4FE1\u606F



WSS1419.unsupported.keybinding.signature=WSS1419: \u4E0D\u652F\u6301\u7B7E\u540D\u7684 KeyBinding



WSS1420.dynamic.policy.signature=WSS1420: \u5904\u7406\u52A8\u6001\u7B56\u7565\u7B7E\u540D{0}\u65F6\u51FA\u9519


WSS1421.no.default.x509certificate.provided=WSS1421: \u672A\u63D0\u4F9B\u9ED8\u8BA4 X509 \u8BC1\u4E66

WSS1422.unsupported.keybinding.EncryptionPolicy=WSS1422: \u4E0D\u652F\u6301 EncryptionPolicy \u7684 KeyBinding

WSS1423.kerberos.context.notset = WSS1423: \u65E0\u6CD5\u83B7\u53D6 Kerberos \u6807\u8BB0\u548C\u5BC6\u94A5\u3002\u68C0\u67E5 Kerberos \u8BBE\u7F6E\u3002

WSS1424.invalid.username.token=WSS1424: \u4E3A\u8BE5\u7528\u6237\u540D\u83B7\u53D6\u7684\u53E3\u4EE4\u4E3A\u7A7A\u503C\u3002

WSS1425.unsupported.encoding=WSS1425: \u521B\u5EFA 160BitKey \u65F6\u51FA\u73B0\u201C\u4E0D\u652F\u6301\u7F16\u7801\u201D\u9519\u8BEF

WSS1426.Base64.decoding.error=WSS1426: \u5728 UsernameToken \u4E2D\u89E3\u7801 Salt \u65F6\u51FA\u9519

# ADHOC is a constant describing a special policy (it's kind of an enum member). Should not be translated.
WSS1427.error.adhoc=WSS1427: \u5185\u90E8\u9519\u8BEF: \u4EE5 ADHOC \u6A21\u5F0F\u8C03\u7528\u4E86 UsernameTokenFilter

WSS1428.signature.confirmation.error=WSS1428: \u627E\u4E0D\u5230 SignatureConfirmation \u5143\u7D20

WSS1429.error.timestamp.internalization=WSS1429: \u65F6\u95F4\u6233\u5185\u90E8\u5316\u5931\u8D25

WSS1430.error.timestamp.validation=WSS1430: \u65F6\u95F4\u6233\u9A8C\u8BC1\u5931\u8D25

WSS1431.no.saml.found=WSS1431: \u627E\u4E0D\u5230 saml \u6807\u8BB0\u3002\u4E0D\u6EE1\u8DB3\u63A5\u6536\u65B9\u8981\u6C42

WSS1432.saml.import.exception=WSS1432: \u5BFC\u5165 SAML \u6807\u8BB0\u65F6\u51FA\u73B0\u5F02\u5E38\u9519\u8BEF

WSS1433.error.extracting.usernametoken=WSS1433: \u63D0\u53D6 usernametoken \u65F6\u51FA\u9519

WSS1434.saml.issuer.validation.failed=WSS1434: SAML \u65AD\u8A00\u7684\u53D1\u5E03\u8005\u9A8C\u8BC1\u5931\u8D25

WSS1435.signature.confirmation.validation.failure=WSS1435: SignatureConfirmation \u9A8C\u8BC1\u5931\u8D25

WSS1436.message.doesnot.conform.timestamp.policy=WSS1436: \u6D88\u606F\u4E0D\u7B26\u5408\u65F6\u95F4\u6233\u7B56\u7565
