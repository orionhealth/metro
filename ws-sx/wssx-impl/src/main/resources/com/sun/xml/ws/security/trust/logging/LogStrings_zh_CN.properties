#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 2010 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
# or packager/legal/LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at packager/legal/LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

#### Logging Error codes

WST0001.unsupported.proofToken.type=WST0001: \u4E0D\u652F\u6301\u9488\u5BF9\u670D\u52A1{1}\u7684\u8BC1\u660E\u6807\u8BB0\u7C7B\u578B: {0}\u3002\u63A5\u53D7\u7684\u7C7B\u578B\u4E3A\u8BA1\u7B97\u5BC6\u94A5\u548C\u4E8C\u8FDB\u5236\u5BC6\u94A5\u3002

WST0002.fail.marshal.tosource=WST0002: \u5C06{0}\u7F16\u96C6\u5230\u6E90\u65F6\u51FA\u9519\u3002

WST0003.error.creating.wstrustfact=WST0003: \u521B\u5EFA WSTrustElementFactory \u65F6\u51FA\u9519\u3002

WST0004.unknown.serviceprovider=WST0004: \u672A\u77E5\u7684\u76EE\u6807\u670D\u52A1\u63D0\u4F9B\u65B9{0}\u3002STS \u914D\u7F6E\u4E0D\u5305\u542B\u670D\u52A1\u7684\u5143\u6570\u636E\u3002

WST0005.classnotfound.null.contract=WST0005: \u56E0\u4E3A\u627E\u4E0D\u5230\u7C7B{0}, \u65E0\u6CD5\u83B7\u53D6\u4FE1\u4EFB\u5408\u540C\u3002

WST0006.fail.rst.source=WST0006: \u65E0\u6CD5\u4ECE\u6E90{0}\u521B\u5EFA RST\u3002

WST0007.fail.rst.elem=WST0007: \u65E0\u6CD5\u4ECE\u5143\u7D20{0}\u521B\u5EFA RST\u3002

WST0008.fail.rstr.source=WST0008: \u65E0\u6CD5\u4ECE\u6E90{0}\u521B\u5EFA RSTR\u3002

WST0009.fail.rstr.elem=WST0009: \u65E0\u6CD5\u4ECE\u5143\u7D20{0}\u521B\u5EFA RSTR\u3002

# {0} - "RST"/"RSTRCollection"/"STR" ("Request Security Token", "Security Token Reference")
WST0010.failed.creation.from.jaxbele=WST0010: \u4ECE JAXBElement \u521B\u5EFA{0}\u65F6\u51FA\u73B0\u95EE\u9898\u3002

WST0011.parserconfig.ex.toElement=WST0011: \u521B\u5EFA\u5143\u7D20\u65F6\u51FA\u73B0\u89E3\u6790\u5668\u914D\u7F6E\u5F02\u5E38\u9519\u8BEF\u3002

WST0012.jaxb.ex.toElement=WST0012: \u521B\u5EFA\u5143\u7D20\u65F6\u51FA\u73B0 JAXBException\u3002

WST0013.error.secret.key=WST0013: \u901A\u8FC7\u5C06\u5927\u5C0F\u4E3A {1} \u7684\u7B97\u6CD5{0}\u5E94\u7528\u5230\u670D\u52A1{2}\u6765\u8BA1\u7B97\u5BC6\u94A5\u65F6\u51FA\u9519\u3002

WST0014.uri.syntax=WST0014: \u4ECE RST \u4E0A\u4E0B\u6587\u83B7\u53D6\u7684 URI \u65E0\u6548\u3002

# {0} - user name, {1} - token type, {2} - URL e.g.: WST0015:The client CN=a,L=b,ST=c,2.5.4.17=#13053238323039 is not authorized to be issued the token of type urn:oasis:names:tc:SAML:2.0:assertion applied to http://localhost:8080/myService.
WST0015.client.not.authorized=WST0015: \u672A\u6388\u6743\u5411\u5BA2\u6237\u673A{0}\u53D1\u5E03\u7C7B\u578B\u4E3A{1}\u4E14\u5E94\u7528\u5230 {2} \u7684\u6807\u8BB0\u3002

WST0016.problem.itCtx=WST0016: \u8BF7\u6C42\u670D\u52A1{1}\u7684\u6807\u8BB0\u65F6, \u8C03\u7528 STS {0}\u6216\u5904\u7406\u5B83\u7684\u54CD\u5E94\u65F6\u51FA\u73B0\u95EE\u9898\u3002

# STS = Security Token Service.
WST0017.service.portname.error=WST0017: \u65E0\u6CD5\u83B7\u53D6 STS \u5143\u6570\u636E\u3002\u5BF9 STS {0}\u7684 MEX \u8C03\u7528\u5931\u8D25\u3002

WST0018.tokens.null=WST0018: \u5E94\u7528\u5230\u670D\u52A1{0}\u7684\u8BF7\u6C42\u5B89\u5168\u6807\u8BB0\u54CD\u5E94\u65E0\u6548\u3002RSTR \u4E0D\u5305\u542B\u5DF2\u53D1\u5E03\u6807\u8BB0, \u4E5F\u4E0D\u5305\u542B\u8BC1\u660E\u6807\u8BB0\u3002

WST0019.invalid.proofToken.type=WST0019: \u670D\u52A1{1}\u7684\u8BC1\u660E\u6807\u8BB0\u7C7B\u578B\u65E0\u6548: {0}\u3002

# {0} - text in base64 encoding (e.g. AGVsbG8=)
WST0020.error.decoding=WST0020: \u89E3\u7801{0}\u65F6\u51FA\u9519\u3002

WST0021.error.unmarshal.domElement=WST0021: \u4ECE dom \u5143\u7D20\u89E3\u7F16\u96C6\u5230 JAXBElement \u4E2D\u65F6\u51FA\u9519\u3002

WST0022.invalid.entropy=WST0022: \u65E0\u6548\u7684\u71B5\u7C7B\u578B: {0}\u3002\u5141\u8BB8\u7684\u7C7B\u578B\u4E3A Binary, EncryptedType \u548C Custom\u3002

WST0023.invalid.uri.syntax=WST0023: \u65E0\u6548\u7684 URI \u8BED\u6CD5: {0}\u3002

WST0024.invalid.request.type=WST0024: \u65E0\u6548\u7684\u8BF7\u6C42\u7C7B\u578B: {0}\u3002\u5FC5\u987B\u4E3A Issue, Cancel, KeyExchange, Renew, \u6216 Validate \u4E4B\u4E00\u3002

WST0025.invalid.key.type=WST0025: \u5E94\u7528\u5230\u670D\u52A1{1}\u7684\u5BC6\u94A5\u7C7B\u578B{0}\u65E0\u6548\u3002\u5FC5\u987B\u4E3A Publickey, Symmetric Key \u6216 No Proof Key \u4E4B\u4E00\u3002

WST0026.invalid.ck.algorithm.E=WST0026: \u8BA1\u7B97\u5BC6\u94A5\u7B97\u6CD5{0}\u65E0\u6548\u3002
WST0026.invalid.ck.algorithm=WST0026: \u8BA1\u7B97\u5BC6\u94A5\u7B97\u6CD5{0}\u65E0\u6548\u3002\u5FC5\u987B\u4E3A HASH \u6216 PSHA1 \u4E4B\u4E00\u3002

WST0028.invalid.ck=WST0028: \u8BA1\u7B97\u5BC6\u94A5 URI {0} \u65E0\u6548\u3002

WST0029.could.not.get.sts.location=WST0029: \u65E0\u6CD5\u4ECE IssuedToken \u6216\u4ECE\u5BA2\u6237\u673A\u914D\u7F6E\u83B7\u53D6 STS \u4F4D\u7F6E\u4EE5\u4FBF\u8BBF\u95EE\u670D\u52A1{0}\u3002

WST0030.requestor.null=WST0030: \u4E3B\u9898\u4E3A\u7A7A\u503C\u3002\u5BA2\u6237\u673A\u672A\u901A\u8FC7\u9A8C\u8BC1, \u6216\u8005\u5728\u9A8C\u8BC1\u65F6\u672A\u5EFA\u7ACB\u4E3B\u9898\u3002

# {0} - token type, {1} URL
WST0031.unsupported.token.type=WST0031: \u5C06\u4E0D\u652F\u6301\u7684\u6807\u8BB0\u7C7B\u578B{0}\u5E94\u7528\u5230 {1}\u3002\u9700\u8981 SAML 1.0 \u6216 SAML 1.1 \u65AD\u8A00\u6807\u8BB0\u7C7B\u578B\u3002

WST0032.error.creating.SAML.assertion=WST0032: \u521B\u5EFA SAML \u65AD\u8A00\u65F6\u51FA\u9519\u3002

WST0033.unable.get.service.cert=WST0033: \u65E0\u6CD5\u83B7\u53D6\u670D\u52A1{0}\u7684\u670D\u52A1\u8BC1\u4E66\u3002

WST0034.unable.get.client.cert=WST0034: \u65E0\u6CD5\u83B7\u53D6\u5BA2\u6237\u673A\u8BC1\u4E66\u3002\u4E3B\u9898\u4E0D\u5305\u542B\u6709\u6548\u7684\u8EAB\u4EFD\u8BC1\u660E, \u6216\u8005\u6DFB\u52A0 X509 \u8BC1\u4E66\u65F6\u51FA\u73B0\u95EE\u9898\u3002

WST0035.unable.create.sign.saml.assertion=WST0035: \u65E0\u6CD5\u521B\u5EFA\u7B7E\u540D SAML \u65AD\u8A00\u3002

WST0036.unable.create.keyInfo=WST0036: \u65E0\u6CD5\u521B\u5EFA\u5BC6\u94A5\u4FE1\u606F\u3002

WST0037.error.computing.key=WST0037: \u8BA1\u7B97\u5BC6\u94A5\u65F6\u51FA\u9519\u3002

WST0038.init.contract.fail=WST0038: \u65E0\u6CD5\u5EFA\u7ACB\u4FE1\u4EFB\u5408\u540C\u3002

WST0039.error.creating.docfactory=WST0039: \u7531\u4E8E\u89E3\u6790\u5668\u5F02\u5E38\u9519\u8BEF, \u521B\u5EFA\u6587\u6863\u5DE5\u5382\u65F6\u51FA\u9519\u3002

WST0040.error.encrypt.proofkey=WST0040: \u4E3A\u670D\u52A1{0}\u52A0\u5BC6\u8BC1\u660E\u5BC6\u94A5\u65F6\u51FA\u9519\u3002

WST0041.service.not.created=WST0041: \u7531\u4E8E URL {0} \u683C\u5F0F\u9519\u8BEF, \u65E0\u6CD5\u521B\u5EFA\u670D\u52A1\u3002

WST0042.no.matching.service.mex=WST0042: \u5728\u5143\u6570\u636E\u4E2D\u627E\u4E0D\u5230\u7AEF\u70B9\u4E3A{0}\u7684\u5339\u914D\u670D\u52A1\u3002

WST0043.unable.get.sts.key=WST0043: \u65E0\u6CD5\u83B7\u53D6 STS \u7684\u5BC6\u94A5\u3002

WST0044.error.encrypt.issued.token=WST0044: \u4E3A\u670D\u52A1{0}\u52A0\u5BC6\u5DF2\u53D1\u5E03\u6807\u8BB0\u65F6\u51FA\u9519\u3002

WST0045.error.unmarshall.claims=WST0045: \u89E3\u7F16\u96C6\u670D\u52A1{0}\u7684\u58F0\u660E\u65F6\u51FA\u9519\u3002

WST0046.token.expired=WST0046: \u6807\u8BB0\u5931\u6548: \u521B\u5EFA\u65F6\u95F4: {0}, \u5931\u6548\u65F6\u95F4: {1}; \u5F53\u524D\u65F6\u95F4: {2}

#### Info, Fine and Warning messages ####
#### Codes starting from 1000+
WST1001.token.type=WST1001: \u6807\u8BB0\u7C7B\u578B: {0}\u3002

WST1002.provider.type=WST1002: STS \u63D0\u4F9B\u65B9\u914D\u7F6E\u7C7B\u578B{0}\u3002

WST1003.tokentype.appliesto.null=WST1003: TokenType \u548C AppliesTo \u4E0D\u80FD\u5747\u4E3A\u7A7A\u503C\u3002

WST1004.error.marshal.toString=WST1004: \u5C06{0}\u5143\u7D20\u7F16\u96C6\u4E3A\u5B57\u7B26\u4E32\u4EE5\u8FDB\u884C\u65E5\u5FD7\u8BB0\u5F55\u65F6\u51FA\u9519\u3002

WST1006.created.rst.issue=WST1006: \u5DF2\u521B\u5EFA\u7528\u4E8E\u53D1\u5E03\u7684 RST:\n {0}\u3002

WST1007.created.rstr.issue=WST1007: \u5DF2\u521B\u5EFA\u7528\u4E8E\u53D1\u5E03\u7684 RSTR:\n {0}\u3002

WST1008.created.rstr.cancel=WST1008: \u5DF2\u521B\u5EFA\u7528\u4E8E\u53D6\u6D88\u7684 RSTR:\n {0}\u3002

WST1009.null.binary.secret=WST1009: \u4E8C\u8FDB\u5236\u5BC6\u94A5\u4E3A\u7A7A\u503C\u3002RST \u4E2D\u7684 ClientEntropy \u4E0D\u5305\u542B\u4E8C\u8FDB\u5236\u5BC6\u94A5\u3002

WST1010.key.size=WST1010: Keysize \u503C: {0}\u3002\u9ED8\u8BA4\u503C\u4E3A {1}\u3002

WST1011.problem.metadata=WST1011: \u4ECE\u5DF2\u53D1\u5E03\u6807\u8BB0\u4E2D\u63D0\u53D6\u5143\u6570\u636E\u65F6\u51FA\u73B0\u95EE\u9898\u3002STS URI \u4E3A {0}\u3002

WST1012.service.portname.mex=WST1012: \u901A\u8FC7 MEX \u83B7\u53D6 STS \u670D\u52A1\u548C\u7AEF\u53E3\u540D\u79F0\u65F6\u51FA\u9519\u3002ServiceName: {0} \u548C PortName: {1}\u3002

WST1013.sts.uri.client=WST1013: \u4ECE\u5BA2\u6237\u673A\u914D\u7F6E\u83B7\u53D6 STS \u4F4D\u7F6E\u65F6\u51FA\u9519\u3002STS URI: {0}\u3002

WST1014.response.invoking.rst=WST1014: \u8C03\u7528 RST \u65F6\u7684 RSTR \u54CD\u5E94:\n {0}\u3002
