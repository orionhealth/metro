#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 2010 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
# or packager/legal/LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at packager/legal/LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

#Error codes WSS 1400-1499 reserved for filter



WSS1400.nousername.found=WSS1400: No Username token found ,Receiver requirement not met

WSS1401.morethanone.username.found=WSS1401: More than one Username token found, Receiver requirement not met

WSS1402.error.posthoc=WSS1402: Internal Error: Called UsernameTokenFilter in POSTHOC Mode

WSS1403.import.username.token=WSS1403: Exception while importing Username Password Token

WSS1404.notmet.digested=WSS1404: Receiver Requirement for Digested Password has not been met

WSS1405.notmet.plaintext=WSS1405: Receiver Requirement for Plain-Text Password has not been met, Received token has Password-Digest

WSS1406.notmet.nonce=WSS1406: Receiver Requirement for nonce has not been met

WSS1407.notmet.nononce=WSS1407: Receiver Requirement for no nonce has not been met, Received token has a nonce specified



WSS1408.failed.sender.authentication=WSS1408: UsernameToken Authentication Failed

WSS1408.diag.cause.1=Invalid Username/Password pair in token



WSS1409.invalid.username.token=WSS1409: Invalid UsernameToken both nonce and created are absent



WSS1410.error.creating.usernametoken=WSS1410: Username is not set

WSS1410.diag.cause.1=Username is not set

WSS1410.diag.check.1=Check that a Username has been passed through the configuration file or through the callback handler



WSS1411.unableto.dump.soapmessage=WSS1411: Unable to dump message {0}



WSS1412.error.processing.dynamicpolicy=WSS1412: Error in processing dynamic policy {0}



WSS1413.error.extracting.certificate=WSS1413: Error extracting certificate



WSS1414.error.extracting.symmetrickey=WSS1414: Error extracting symmetric key {0}



WSS1415.saml.assertion.notset=WSS1415: SAML Assertion not set by CallbackHandler for Encryption Processing



WSS1416.unsupported.keybinding=WSS1416: Unsupported KeyBinding for X509CertificateBinding



WSS1417.exception.processing.signature=WSS1417: Error while processing signature {0}



WSS1418.saml.info.notset=WSS1418: None of SAML Assertion, SAML AuthorityBinding information was set into the Policy by the CallbackHandler



WSS1419.unsupported.keybinding.signature=WSS1419: Unsupported KeyBinding for signature



WSS1420.dynamic.policy.signature=WSS1420: Error while processing dynamic policy signature {0}


WSS1421.no.default.x509certificate.provided=WSS1421: No Default X509 Certificate was provided

WSS1422.unsupported.keybinding.EncryptionPolicy=WSS1422: Unsupported KeyBinding for EncryptionPolicy

WSS1423.kerberos.context.notset = WSS1423: Kerberos token and keys could not be obtained. Check Kerberos setup.

WSS1424.invalid.username.token=WSS1424: Password for the username was obtained as NULL.

WSS1425.unsupported.encoding=WSS1425: Unsupported encoding error  while creating 160BitKey

WSS1426.Base64.decoding.error=WSS1426:Error while decoding the Salt in UsernameToken

# ADHOC is a constant describing a special policy (it‘s kind of an enum member). Should not be translated.
WSS1427.error.adhoc=WSS1427: Internal Error: Called UsernameTokenFilter in ADHOC Mode

WSS1428.signature.confirmation.error=WSS1428: SignatureConfirmation Element not found

WSS1429.error.timestamp.internalization=WSS1429: failure in timestamp internalization

WSS1430.error.timestamp.validation=WSS1430: failure in timestamp validation

WSS1431.no.saml.found=WSS1431: no saml token found. receiver requirements not met

WSS1432.saml.import.exception=WSS1432: Exception while importing SAML Token

WSS1433.error.extracting.usernametoken=WSS1433: Error extracting usernametoken

WSS1434.saml.issuer.validation.failed=WSS1434: Issuer validation failed for SAML Assertion

WSS1435.signature.confirmation.validation.failure=WSS1435: Failure in SignatureConfirmation validation

WSS1436.message.doesnot.conform.timestamp.policy=WSS1436: message doesn't conform to the timestamp policy
