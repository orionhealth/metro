#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 2010 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
# or packager/legal/LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at packager/legal/LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

#Error codes WSS 1400-1499 reserved for filter



WSS1400.nousername.found=WSS1400: \u627E\u4E0D\u5230\u300C\u4F7F\u7528\u8005\u540D\u7A31\u300D\u8A18\u865F, \u4E0D\u7B26\u5408\u63A5\u6536\u7AEF\u9700\u6C42

WSS1401.morethanone.username.found=WSS1401: \u627E\u5230\u4E00\u500B\u4EE5\u4E0A\u7684\u300C\u4F7F\u7528\u8005\u540D\u7A31\u300D\u8A18\u865F, \u4E0D\u7B26\u5408\u63A5\u6536\u7AEF\u9700\u6C42

WSS1402.error.posthoc=WSS1402: \u5167\u90E8\u932F\u8AA4: \u5728 POSTHOC \u6A21\u5F0F\u547C\u53EB UsernameTokenFilter

WSS1403.import.username.token=WSS1403: \u532F\u5165\u300C\u4F7F\u7528\u8005\u540D\u7A31\u5BC6\u78BC\u8A18\u865F\u300D\u6642\u767C\u751F\u7570\u5E38\u72C0\u6CC1

WSS1404.notmet.digested=WSS1404: \u4E0D\u7B26\u5408\u300C\u6458\u8981\u7684\u5BC6\u78BC\u300D\u63A5\u6536\u7AEF\u9700\u6C42

WSS1405.notmet.plaintext=WSS1405: \u4E0D\u7B26\u5408\u300C\u7D14\u6587\u5B57\u5BC6\u78BC\u300D\u63A5\u6536\u7AEF\u9700\u6C42, \u6536\u5230\u7684\u8A18\u865F\u542B\u6709\u300C\u5BC6\u78BC\u6458\u8981\u300D

WSS1406.notmet.nonce=WSS1406: \u4E0D\u7B26\u5408\u81E8\u6642\u503C\u7684\u63A5\u6536\u7AEF\u9700\u6C42

WSS1407.notmet.nononce=WSS1407: \u4E0D\u7B26\u5408\u7121\u81E8\u6642\u503C\u7684\u63A5\u6536\u7AEF\u9700\u6C42, \u6536\u5230\u7684\u8A18\u865F\u6307\u5B9A\u81E8\u6642\u503C



WSS1408.failed.sender.authentication=WSS1408: UsernameToken \u8A8D\u8B49\u5931\u6557

WSS1408.diag.cause.1=\u8A18\u865F\u4E2D\u7684\u300C\u4F7F\u7528\u8005\u540D\u7A31/\u5BC6\u78BC\u300D\u7D44\u7121\u6548



WSS1409.invalid.username.token=WSS1409: \u7121\u6548\u7684 UsernameToken, \u7F3A\u5C11\u81E8\u6642\u503C\u8207\u5EFA\u7ACB\u7684\u9805\u76EE



WSS1410.error.creating.usernametoken=WSS1410: \u672A\u8A2D\u5B9A\u4F7F\u7528\u8005\u540D\u7A31

WSS1410.diag.cause.1=\u672A\u8A2D\u5B9A\u4F7F\u7528\u8005\u540D\u7A31

WSS1410.diag.check.1=\u78BA\u5B9A\u900F\u904E\u7D44\u614B\u6A94\u6216\u900F\u904E\u56DE\u547C\u8655\u7406\u7A0B\u5F0F\u50B3\u9001\u4F7F\u7528\u8005\u540D\u7A31



WSS1411.unableto.dump.soapmessage=WSS1411: \u7121\u6CD5\u50BE\u5370\u8A0A\u606F {0}



WSS1412.error.processing.dynamicpolicy=WSS1412: \u8655\u7406\u52D5\u614B\u539F\u5247 {0} \u6642\u767C\u751F\u932F\u8AA4



WSS1413.error.extracting.certificate=WSS1413: \u64F7\u53D6\u6191\u8B49\u6642\u767C\u751F\u932F\u8AA4



WSS1414.error.extracting.symmetrickey=WSS1414: \u64F7\u53D6\u5C0D\u7A31\u5F0F\u91D1\u9470 {0} \u6642\u767C\u751F\u932F\u8AA4



WSS1415.saml.assertion.notset=WSS1415: CallbackHandler \u672A\u8A2D\u5B9A SAML \u5BA3\u544A\u4EE5\u9032\u884C\u52A0\u5BC6\u8655\u7406



WSS1416.unsupported.keybinding=WSS1416: \u4E0D\u652F\u63F4\u7684 X509CertificateBinding KeyBinding



WSS1417.exception.processing.signature=WSS1417: \u8655\u7406\u7C3D\u7AE0 {0} \u6642\u767C\u751F\u932F\u8AA4



WSS1418.saml.info.notset=WSS1418: CallbackHandler \u672A\u5728\u300C\u539F\u5247\u300D\u4E2D\u8A2D\u5B9A\u4EFB\u4F55\u300CSAML \u5BA3\u544A\u300D\u3001SAML AuthorityBinding \u8CC7\u8A0A



WSS1419.unsupported.keybinding.signature=WSS1419: \u4E0D\u652F\u63F4\u7684\u7C3D\u7AE0 KeyBinding



WSS1420.dynamic.policy.signature=WSS1420: \u8655\u7406\u52D5\u614B\u539F\u5247\u7C3D\u7AE0 {0} \u6642\u767C\u751F\u932F\u8AA4


WSS1421.no.default.x509certificate.provided=WSS1421: \u672A\u63D0\u4F9B\u300C\u9810\u8A2D X509 \u6191\u8B49\u300D

WSS1422.unsupported.keybinding.EncryptionPolicy=WSS1422: \u4E0D\u652F\u63F4\u7684 EncryptionPolicy KeyBinding

WSS1423.kerberos.context.notset = WSS1423: \u7121\u6CD5\u53D6\u5F97 Kerberos \u8A18\u865F\u548C\u91D1\u9470. \u8ACB\u6AA2\u67E5 Kerberos \u8A2D\u5B9A.

WSS1424.invalid.username.token=WSS1424: \u53D6\u5F97\u4E4B\u4F7F\u7528\u8005\u540D\u7A31\u7684\u5BC6\u78BC\u70BA NULL.

WSS1425.unsupported.encoding=WSS1425: \u5EFA\u7ACB 160BitKey \u6642\u767C\u751F\u4E0D\u652F\u63F4\u7684\u7DE8\u78BC\u932F\u8AA4

WSS1426.Base64.decoding.error=WSS1426: \u89E3\u78BC UsernameToken \u4E2D\u7684 Salt \u6642\u767C\u751F\u932F\u8AA4

# ADHOC is a constant describing a special policy (it's kind of an enum member). Should not be translated.
WSS1427.error.adhoc=WSS1427: \u5167\u90E8\u932F\u8AA4: \u5728 ADHOC \u6A21\u5F0F\u547C\u53EB UsernameTokenFilter

WSS1428.signature.confirmation.error=WSS1428: \u627E\u4E0D\u5230 SignatureConfirmation \u5143\u7D20

WSS1429.error.timestamp.internalization=WSS1429: \u6642\u6233\u5167\u90E8\u5316\u5931\u6557

WSS1430.error.timestamp.validation=WSS1430: \u6642\u6233\u9A57\u8B49\u5931\u6557

WSS1431.no.saml.found=WSS1431: \u627E\u4E0D\u5230 SAML \u8A18\u865F, \u4E0D\u7B26\u5408\u63A5\u6536\u7AEF\u9700\u6C42

WSS1432.saml.import.exception=WSS1432: \u532F\u5165\u300CSAML \u8A18\u865F\u300D\u6642\u767C\u751F\u7570\u5E38\u72C0\u6CC1

WSS1433.error.extracting.usernametoken=WSS1433: \u64F7\u53D6\u4F7F\u7528\u8005\u540D\u7A31\u8A18\u865F\u6642\u767C\u751F\u932F\u8AA4

WSS1434.saml.issuer.validation.failed=WSS1434: \u9A57\u8B49\u300CSAML \u5BA3\u544A\u300D\u767C\u51FA\u8005\u5931\u6557

WSS1435.signature.confirmation.validation.failure=WSS1435: SignatureConfirmation \u9A57\u8B49\u5931\u6557

WSS1436.message.doesnot.conform.timestamp.policy=WSS1436: \u8A0A\u606F\u4E0D\u7B26\u5408\u6642\u6233\u539F\u5247
