#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 2010 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
# or packager/legal/LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at packager/legal/LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

# ResourceBundle properties file for optimized tokens

WSS1801.bst.creation.failed = WSS1801: BinarySecurityToken\u306E\u69CB\u7BC9\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F\u3002

WSS1802.wrong.tokeninclusion.policy = WSS1802: IncludeToken\u30DD\u30EA\u30B7\u30FC\u304CNever\u3067\u3042\u308A\u3001WSSAssertion\u306EKeyIdentifier/Thumbprint\u53C2\u7167\u30BF\u30A4\u30D7\u306Bfalse\u304C\u8A2D\u5B9A\u3055\u308C\u3066\u3044\u307E\u3059

WSS1803.unsupported.reference.type = WSS1803: \u53C2\u7167\u30BF\u30A4\u30D7{0}\u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u307E\u305B\u3093

WSS1804.wrong.encrypted.key = WSS1804: encryptedKey Id\u306E\u9577\u3055\u304C0\u3067\u3059

WSS1805.derivedkeys.with.asymmetricbinding.unsupported = WSS1805: X509Token\u30DD\u30EA\u30B7\u30FC\u3067\u306EDerivedKeys\u3092\u4F7F\u7528\u3057\u305F\u975E\u5BFE\u79F0\u30D0\u30A4\u30F3\u30C7\u30A3\u30F3\u30B0\u306F\u307E\u3060\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u307E\u305B\u3093

WSS1806.error.generating.symmetric.key: WSS1806: \u5BFE\u79F0\u9375\u306E\u751F\u6210\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F\u3002\u6307\u5B9A\u3055\u308C\u305F\u30A2\u30EB\u30B4\u30EA\u30BA\u304C\u6B63\u3057\u304F\u3042\u308A\u307E\u305B\u3093\u3067\u3057\u305F\u3002

WSS1807.cert.proofKey.null.issuedtoken: WSS1807: \u767A\u884C\u30C8\u30FC\u30AF\u30F3\u306E\u30EA\u30AF\u30A8\u30B9\u30BF\u8A3C\u660E\u66F8\u3068\u8A3C\u660E\u9375\u306E\u4E21\u65B9\u304Cnull\u3067\u3059

WSS1808.id.notset.encrypted.issuedtoken: WSS1808: \u6697\u53F7\u5316IssuedToken\u306EId\u5C5E\u6027\u304C\u8A2D\u5B9A\u3055\u308C\u3066\u3044\u307E\u305B\u3093

WSS1809.sct.not.found: WSS1809: \u30BB\u30C3\u30B7\u30E7\u30F3\u3067SecureConversation\u30C8\u30FC\u30AF\u30F3\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002

WSS1810.null.privatekey.saml: WSS1810: \u7F72\u540D\u306B\u4F7F\u7528\u3055\u308C\u308BSAML\u30DD\u30EA\u30B7\u30FC\u306E\u79D8\u5BC6\u9375\u30D0\u30A4\u30F3\u30C7\u30A3\u30F3\u30B0\u3067\u3001\u79D8\u5BC6\u9375\u304Cnull\u306B\u8A2D\u5B9A\u3055\u308C\u3066\u3044\u307E\u3059

WSS1811.null.saml.assertion: WSS1811: \u7F72\u540D\u306B\u4F7F\u7528\u3055\u308C\u308BSAML\u30D0\u30A4\u30F3\u30C7\u30A3\u30F3\u30B0\u3067\u3001SAML\u30A2\u30B5\u30FC\u30B7\u30E7\u30F3\u304Cnull\u306B\u8A2D\u5B9A\u3055\u308C\u3066\u3044\u307E\u3059

WSS1812.missing.cert.samlassertion: WSS1812: SAML\u30A2\u30B5\u30FC\u30B7\u30E7\u30F3\u306ESubjectConfirmation\u5185\u306E\u9375\u306B\u5BFE\u5FDC\u3059\u308B\u8A3C\u660E\u66F8\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3067\u3057\u305F

WSS1813.unsupported.embeddedreferencetype.saml = WSS1813: SAML\u30A2\u30B5\u30FC\u30B7\u30E7\u30F3\u306E\u57CB\u8FBC\u307F\u53C2\u7167\u30BF\u30A4\u30D7\u306F\u307E\u3060\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u307E\u305B\u3093

WSS1814.error.encoding.certificate = WSS1814: X509\u8A3C\u660E\u66F8\u306E\u30A8\u30F3\u30B3\u30FC\u30C9\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F

WSS1815.error.processing.str = WSS1815: \u53D7\u4FE1\u30E1\u30C3\u30BB\u30FC\u30B8\u306ESecurityTokenReference\u306E\u51E6\u7406\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F

# {0} - "Direct Reference"/"KeyIdentifier"/"Issuer Serial"
WSS1816.error.reference.mechanism = WSS1816: {0}\u306E\u89E3\u6C7A\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F

# {0} - "Direct Reference"/"KeyIdentifier"/"Issuer Serial"
WSS1817.error.reference.canwriter = WSS1817: \u6B63\u898F\u5316\u30E9\u30A4\u30BF\u30FC\u3078\u306E{0}\u306E\u66F8\u8FBC\u307F\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F

WSS1818.algorithm.notset.derivedkey = WSS1818: \u30AD\u30FC\u3092\u5C0E\u51FA\u3059\u308B\u305F\u3081\u306E\u30A2\u30EB\u30B4\u30EA\u30BA\u30E0\u304C\u8A2D\u5B9A\u3055\u308C\u3066\u3044\u307E\u305B\u3093

WSS1819.error.symmkey.derivedkey = WSS1819: DerivedKeyToken\u306ESymmetricKey\u306E\u751F\u6210\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F

WSS1820.error.nonce.derivedkey = WSS1820: ID: {0}\u306EDerivedKey\u306Enonce\u306E\u30C7\u30B3\u30FC\u30C9\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F

WSS1821.invalid.dkt.token = WSS1821: \u7121\u52B9\u306ADerivedKey\u30C8\u30FC\u30AF\u30F3\u3002Offset\u3068Generation\u306E\u4E21\u65B9\u304C\u6307\u5B9A\u3055\u308C\u3066\u3044\u307E\u3059\u3002

WSS1822.kerberos.always.notallowed = WSS1822: Kerberos\u30C8\u30FC\u30AF\u30F3\u3067\u3001IncludeToken Always\u304A\u3088\u3073AlwaysToRecipient\u306F\u8A31\u53EF\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002

WSS1823.keyPair.proofKey.null.issuedtoken: WSS1823: \u767A\u884C\u30C8\u30FC\u30AF\u30F3\u306E\u30B5\u30DD\u30FC\u30C8\u3059\u308B\u30C8\u30FC\u30AF\u30F3(KeyValueToken\u307E\u305F\u306FRsaToken)\u306E\u8A3C\u660E\u9375\u3068RSA KeyPair\u306E\u4E21\u65B9\u304Cnull\u3067\u3059

# 1850 onwards for FINEST, INFO and WARNING messages

WSS1851.referencetype.x509.token = WSS1851: X509\u30C8\u30FC\u30AF\u30F3\u306E\u53C2\u7167\u30BF\u30A4\u30D7: {0}

WSS1852.keyIdentifier.empty= WSS1852: KeyIdentifier\u5024\u306F\u7A7A\u306B\u3067\u304D\u307E\u305B\u3093\u3002\u4F7F\u7528\u3055\u308C\u305F\u8A3C\u660E\u66F8\u30D0\u30FC\u30B8\u30E7\u30F3\u304CSubjectKeyIdentifier\u3092\u30B5\u30DD\u30FC\u30C8\u3057\u3066\u3044\u306A\u3044\u53EF\u80FD\u6027\u304C\u3042\u308A\u307E\u3059\u3002

WSS1853.referencetype.kerberos.token = WSS1853: Kerberos\u30C8\u30FC\u30AF\u30F3\u306E\u53C2\u7167\u30BF\u30A4\u30D7: {0}

WSS1854.two.tokens.with.sameID=WSS1854: \u540C\u3058Id\u5C5E\u6027\u3092\u6301\u30642\u3064\u306E\u30C8\u30FC\u30AF\u30F3\u304C\u898B\u3064\u304B\u308A\u307E\u3057\u305F

WSS1855.xml.stream.reader.error = WSS1855: getKey\u4E2D\u306Bxml\u30B9\u30C8\u30EA\u30FC\u30E0\u30FB\u30EA\u30FC\u30C0\u30FC\u4F8B\u5916\u304C\u767A\u751F\u3057\u307E\u3057\u305F

WSS1856.null.usernametoken = WSS: null\u306Eusernametoken
