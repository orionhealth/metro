<?xml version="1.0"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2011 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<project name="WSIT e2e tests" default="main" basedir=".">
    <property file="${basedir}/build.properties"/>
    <import file="properties.xml"/>

    <path id="harness.classpath">
        <fileset dir="${test.lib.dir}" includes="*.jar"/>
    </path>

    <!-- invokes e2e tests -->
    <macrodef name="run-tests">
        <!--
            These are the default args that are passed to the harness which mean that
            the tests will be using the dist image of the wsit workspace , run the tests
            using local transport and recursively scan for all the sub dirs under testcases

            Please modify these options if you wish to test the harness in different
            modes
            For more information on the different command line options
            refer to docs/index.html
        -->
        <element name="arguments" />
        <sequential>
            <antcall target="prepare"/>

            <!-- BEGIN: Emma code coverage specific stuff -->
            <emma enabled="${emma.enabled}" >
                <instr
                    destdir="${out.instr.dir}"	
                    metadatafile="${coverage.dir}/metadata.emma"
                    merge="true"
                >
                    <instrpath>
                        <fileset dir="${metro.image}/lib" includes="*.jar" />
                    </instrpath>

                    <filter includes="com.sun.xml.ws.addressing.*"/>
                    <filter includes="com.sun.xml.ws.api.tx*"/>
                    <filter includes="com.sun.xml.ws.assembler.*"/>
                    <filter includes="com.sun.xml.ws.encoding.*"/>
                    <filter includes="com.sun.xml.ws.message.*"/>
                    <filter includes="com.sun.xml.ws.mex.*"/>
                    <filter includes="com.sun.xml.ws.policy.*"/>
                    <filter includes="com.sun.xml.ws.rm.*"/>
                    <filter includes="com.sun.xml.ws.runtime.*"/>
                    <filter includes="com.sun.xml.ws.security.*"/>
                    <filter includes="com.sun.xml.ws.transport.*"/>
                    <filter includes="com.sun.xml.ws.tx.*"/>

                    <filter includes="com.sun.xml.wss.jaxws.*"/>
                    <filter includes="com.sun.xml.wss.provider.*"/>
                </instr>
            </emma>
            <!-- END: Emma code coverage specific stuff -->

            <path id="ws.harness.override.path">
                <pathelement location="${test.lib.dir}/transaction-api.jar" />
                <path refid="instr.override.path" />
            </path>

            <java jar="${test.lib.dir}/harness.jar" fork="true">
                <sysproperty key="WSIT_HOME" value="${basedir}/misc"/>
                <!--sysproperty key="com.sun.xml.ws.transport.http.client.HttpTransportPipe.dump" value="true"/>
                <sysproperty key="com.sun.xml.ws.transport.local.LocalTransportTube.dump" value="true"/-->

                <!--sysproperty key="com.sun.xml.ws.rx.rm.runtime.RmTubeFactory.dump.client.after" value="true"/-->
                <!--sysproperty key="com.sun.xml.ws.rx.rm.runtime.RmTubeFactory.dump.endpoint.before" value="true"/-->
                <!--sysproperty key="com.sun.xml.wss.provider.wsit.SecurityTubeFactory.dump.client.after" value="true"/-->
                <!--sysproperty key="com.sun.xml.ws.assembler.jaxws.TransportTubeFactory.dump.client.before" value="true"/-->
                <!--sysproperty key="com.sun.xml.ws.rx.rm.runtime.RmTubeFactory.client.after" value="true"/-->
                
                <!-- DO NOT REMOVE OR SET TO FALSE -->
                <sysproperty key="com.sun.xml.ws.monitoring.client" value="true"/>


                <jvmarg value="-Xmx512m" />

                <arg value="-report" />
                <arg path="${logs.dir}" />

                <!-- BEGIN: Emma code coverage specific stuff -->
                <arg value="-cp:override" />
                <arg pathref="ws.harness.override.path" />
                <jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma" />
                <jvmarg value="-Demma.coverage.out.merge=true" />
                <!-- END: Emma code coverage specific stuff -->

                <arguments />
                <arg line="${args}"/>
            </java>

            <mkdir dir="${logs.dir}/junit-reports" />
            <junitreport todir="${logs.dir}/junit-reports">
                <fileset dir="${logs.dir}" includes="*.xml" />
                <report format="frames" todir="${logs.dir}/junit-reports"/>
            </junitreport>

            <!-- BEGIN: Emma code coverage specific stuff -->
            <emma enabled="${emma.enabled}" >
                <report sourcepath="${metro.sources}" >
                    <fileset dir="${coverage.dir}" >
                        <include name="*.emma" />
                    </fileset>

                    <txt outfile="${coverage.dir}/coverage.txt" />
                    <html outfile="${coverage.dir}/coverage.html" />
                    <xml outfile="${coverage.dir}/coverage.xml" />
                </report>
            </emma>
            <!-- END: Emma code coverage specific stuff -->

        </sequential>
    </macrodef>

    <!-- BEGIN: Emma code coverage specific stuff -->
    <path id="emma.lib" >
        <pathelement location="${emma.dir}/emma.jar" />
        <pathelement location="${emma.dir}/emma_ant.jar" />
    </path>
    <path id="instr.override.path">
        <pathelement location="${out.instr.dir}" />
        <path refid="emma.lib" />
    </path>

    <taskdef resource="emma_ant.properties" classpathref="emma.lib" />

    <target name="emma" description="turns on EMMA's on-the-fly instrumentation mode" >
        <property name="emma.enabled" value="true" />
    </target>

    <target name="setup-emma-remote" description="internal: overrides remote setup for emma">
        <property name="metro.image" value="${basedir}/metro-image/metro"/>
        <property name="metro.sources" value="${basedir}/metro-image/webservices-src.zip"/>
    </target>

    <target name="setup-emma-local" description="internal: overrides local setup for emma">
        <property name="metro.image" value="${basedir}/metro-image/metro"/>
        <property name="metro.sources" value="${basedir}/metro-image/webservices-src.zip"/>
    </target>

    <target name="setup-emma-v3" description="internal: overrides GlassFish v3 setup for emma">
        <property name="metro.image" value="${basedir}/metro-image/metro"/>
        <property name="metro.sources" value="${basedir}/metro-image/webservices-src.zip"/>
    </target>

    <!--target name="emma_report" description="just creates a report from metadata files" >
        <emma>
            <report sourcepath="${metro.sources}" >
                <fileset dir="${coverage.dir}" >
                    <include name="*.emma" />
                </fileset>

                <txt outfile="${coverage.dir}/coverage.txt" />
                <html outfile="${coverage.dir}/coverage.html" />
            </report>
        </emma>
    </target-->
    <!-- END: Emma code coverage specific stuff -->

    <target name="clean">
        <delete dir="build"/>
        <delete dir="metro-image"/>
        <delete dir="${logs.dir}"/>
        <delete dir="${out.instr.dir}"/>
        <delete dir="${coverage.dir}"/>
    </target>


    <target name="prepare">
        <mkdir dir="${logs.dir}"/>
        <mkdir dir="${logs.dir}/junit-reports" />
        <mkdir dir="${out.instr.dir}" />
    </target>

    <target name="get-metro-local" description="Prepares local copy of the Metro bundle">
        <mkdir dir="metro-image" />
        <unzip src="${metro.dir}/bundles/metro-standalone/target/metro.zip" dest="metro-image" />
    </target>
    
    <target name="get-metro-hudson" description="internal: retrieve last successful build of WSIT from hudson" unless="noget">
        <mkdir dir="metro-image"/>
        <property name="metro.zip.url" value="http://sysifos-sol.cz.oracle.com/hudson/job/metro-2.2.1/lastSuccessfulBuild/artifact/wsit/bundles/metro-standalone/target/metro.zip"/>
        <get src="${metro.zip.url}"
             dest="metro-image/metro.zip"/>
        <unzip src="metro-image/metro.zip" dest="metro-image"/>
    </target>


    <target name="overwrite-test-harness-lib" unless="test.harness.uptodate">
        <echo message="Test harness not up-to-date, updating..." />

        <mkdir dir="tmp/test-harness"/>                  
        <get src="http://hudson-sca.us.oracle.com/job/jaxws-test-harness/lastSuccessfulBuild/artifact/test-harness/build/test-harness.zip"
             dest="tmp/test-harness.zip"/>
        <unzip src="tmp/test-harness.zip" dest="tmp"/>
        
        <copy todir="${test.lib.dir}" overwrite="true" verbose="${verbose}">
            <fileset dir="tmp/test-harness" includes="*.zip, *.jar"/>
        </copy>
        <copy todir="${test.docs.dir}" overwrite="true" verbose="${verbose}">
            <fileset dir="tmp/test-harness" includes="*.html, *.png"/>
        </copy>
        <copy file="tmp/test-harness-build-number.txt" todir="${test.lib.dir}" overwrite="true" verbose="${verbose}" />

    </target>

    <target name="overwrite-local-transport-lib" unless="local.transport.uptodate">
        <echo message="Local transport not up-to-date, updating..." />

        <get src="http://hudson-sca.us.oracle.com/job/jaxws-2.2.x-nightly-push/lastSuccessfulBuild/artifact/jax-ws-sources/jaxws-ri/transports/local/build/jaxws-local-transport.jar"
             dest="${test.lib.dir}/jaxws-local-transport.jar"/>
        <get src="http://hudson-sca.us.oracle.com/job/jaxws-2.2.x-nightly-push/lastSuccessfulBuild/artifact/jax-ws-sources/jaxws-ri/transports/local/build/jaxws-local-transport-src.zip"
             dest="${test.lib.dir}/jaxws-local-transport.src.zip"/>

        <copy file="tmp/local-transport-build-number.txt" todir="${test.lib.dir}" overwrite="true" verbose="${verbose}" />
    </target>

    <target name="integrate-test-libs-hudson" description="integrates latest test harness and local JAX-Ws RI transport into Metro, meant for internal consumption only">
        <mkdir dir="tmp"/>
        <get src="http://hudson-sca.us.oracle.com/job/jaxws-test-harness/lastSuccessfulBuild/buildNumber"
             dest="tmp/test-harness-build-number.txt"/>
        <get src="http://hudson-sca.us.oracle.com/job/jaxws-2.2.x-nightly-push/lastSuccessfulBuild/buildNumber"
             dest="tmp/local-transport-build-number.txt"/>

        <loadfile property="test.harness.hudson" srcfile="tmp/test-harness-build-number.txt" />
        <loadfile property="test.harness.local" srcfile="lib/test-harness-build-number.txt" />

        <loadfile property="local.transport.hudson" srcfile="tmp/local-transport-build-number.txt" />
        <loadfile property="local.transport.local" srcfile="lib/local-transport-build-number.txt" />

        <echo message="Test harness version: hudson=${test.harness.hudson}, local=${test.harness.local}" />
        <echo message="Local transport version: hudson=${local.transport.hudson}, local=${local.transport.local}" />

        <condition property="test.harness.uptodate" >
            <equals arg1="${test.harness.hudson}" arg2="${test.harness.local}" trim="true" />
        </condition>

        <condition property="local.transport.uptodate" >
            <equals arg1="${local.transport.hudson}" arg2="${local.transport.local}" trim="true" />
        </condition>

        <antcall target="overwrite-test-harness-lib"/>
        <antcall target="overwrite-local-transport-lib"/>

        <delete dir="tmp" verbose="${verbose}" includeemptydirs="true"/>
    </target>

    <target name="main-hudson-no-get">
        <property name="noget" value="true"/>
        <antcall target="main-hudson"/>
    </target>

    <target name="main-hudson" description="Invoke Metro E2E tests based on a last successful Metro build from Hudson."
            depends="setup-emma-remote, get-metro-hudson">

        <run-tests>
            <arguments>
                <arg value="-r" />
                <arg path="${testcases}" />
                <arg value="-cp:wsit-image" />
                <arg path="${metro.image}" />
                <arg value="-transport" />
                <arg path="${test.lib.dir}/jaxws-local-transport.jar" />
            </arguments>
        </run-tests>
    </target>

    <target name="main-hudson-jdk6" description="Invoke Metro E2E tests based on a last successful Metro build from Hudson."
            depends="setup-emma-remote, get-metro-hudson">

        <mkdir dir="metro-image/endorsed" />
        <copy file="metro-image/metro/lib/webservices-api.jar" todir="metro-image/endorsed"/>

        <run-tests>
            <arguments>
                <jvmarg value="-Djava.endorsed.dirs=metro-image/endorsed"/>
                <arg value="-r" />
                <arg path="${testcases}" />
                <arg value="-cp:wsit-image" />
                <arg path="${metro.image}" />
                <arg value="-transport" />
                <arg path="${test.lib.dir}/jaxws-local-transport.jar" />
            </arguments>
        </run-tests>
    </target>

    <target name="debug-v3"
            description="Run all tests with the Metro libraries for GlassFish v3"
            depends="setup-emma-v3">

        <run-tests>
            <arguments>
                <jvmarg value="-Xdebug"/>
                <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,address=8000"/>
                <arg value="-r" />
                <arg path="${testcases}" />
                <arg value="-cp:metrov3-image" />
                <arg path="${metro.image}" />
                <arg value="-transport" />
                <arg path="${test.lib.dir}/jaxws-local-transport.jar" />
            </arguments>
        </run-tests>
    </target>

    <target name="main-v3"
            description="Run all tests with the Metro libraries for GlassFish v3"
            depends="setup-emma-v3">

        <run-tests>
            <arguments>
                <arg value="-r" />
                <arg path="${testcases}" />
                <arg value="-cp:metrov3-image" />
                <arg path="${metro.image}" />
                <arg value="-transport" />
                <arg path="${test.lib.dir}/jaxws-local-transport.jar" />
            </arguments>
        </run-tests>
    </target>

    <target name="debug"
            description="Runs the e2e tests on the entire workspace in a debug mode"
            depends="setup-emma-local">

        <run-tests>
            <arguments>
                <jvmarg value="-Xdebug"/>
                <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,address=8000"/>
                <arg value="-r" />
                <arg path="${testcases}" />
                <arg value="-cp:wsit-image" />
                <arg path="${metro.image}" />
                <arg value="-transport" />
                <arg path="${test.lib.dir}/jaxws-local-transport.jar" />
            </arguments>
        </run-tests>
    </target>

    <target name="profile"
            description="Runs the e2e tests on the entire workspace in a profile mode"
            depends="setup-emma-local">

        <run-tests>
            <arguments>
                <jvmarg value="-agentpath:/tmp/NBProfiler17444.link/deployed/jdk15/mac/libprofilerinterface.jnilib=/tmp/NBProfiler17444.link,5140"/>
                <arg value="-r" />
                <arg path="${testcases}" />
                <arg value="-cp:wsit-image" />
                <arg path="${metro.image}" />
                <arg value="-transport" />
                <arg path="${test.lib.dir}/jaxws-local-transport.jar" />
            </arguments>
        </run-tests>
    </target>

    <target name="main"
            description="Runs the e2e tests on the entire workspace"
            depends="setup-emma-local, get-metro-local">

        <run-tests>
            <arguments>
                <arg value="-r" />
                <arg path="${testcases}" />
                <arg value="-cp:wsit-image" />
                <arg path="${metro.image}" />
                <arg value="-transport" />
                <arg path="${test.lib.dir}/jaxws-local-transport.jar" />
            </arguments>
        </run-tests>
    </target>

    <target name="main-jdk6"
            description="Runs the e2e tests on the entire workspace"
            depends="setup-emma-local, get-metro-local">

        <mkdir dir="metro-image/endorsed" />
        <copy file="metro-image/metro/lib/webservices-api.jar" todir="metro-image/endorsed"/>
        
        <run-tests>
            <arguments>
                <jvmarg value="-Djava.endorsed.dirs=metro-image/endorsed"/>
                <arg value="-r" />
                <arg path="${testcases}" />
                <arg value="-cp:wsit-image" />
                <arg path="${metro.image}" />
                <arg value="-transport" />
                <arg path="${test.lib.dir}/jaxws-local-transport.jar" />
            </arguments>
        </run-tests>
    </target>

</project>
