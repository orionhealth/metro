<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!--
    This XML schema document describes format of the Metro WS-ReliableMessaging
    custom WS-Policy assertions.

    Naming conventiotns:
    - Simple XSD types are suffixed with "SType"
    - Complex XSD types are suffixed with "CType"
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
    targetNamespace="http://java.sun.com/xml/ns/metro/ws-rx/wsrmp/200702"
    xmlns:tns="http://java.sun.com/xml/ns/metro/ws-rx/wsrmp/200702"
    elementFormDefault="qualified"
    attributeFormDefault="unqualified">

    <xs:simpleType name="BackoffAlgorithmSType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="Exponential" />
            <xs:enumeration value="Linear" />
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="RetransmissionConfigCType">
        <xs:sequence >
            <xs:element name="Interval" type="tns:IntervalCType" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        Specifies how long the RM Source will wait after transmitting
                        a message and before retransmitting the message.
                        If omitted, there is no implied value. Specified in milliseconds.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="BackoffAlgorithm" type="tns:BackoffAlgorithmSType" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        Specifies that the retransmission interval will be adjusted using a specific
                        (e.g. exponential back-off) algorithm.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="MaxRetries" type="xs:unsignedLong" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        A message is considered to be transferred if its delivery at the recipient
                        has been acknowledged by the recipient.

                        If an acknowledgment has not been received within a certain amount of time
                        for a message that has been transmitted, the infrastructure automatically
                        retransmits the message. The infrastructure tries to send the message for
                        at most the configured number of times. Not receiving an acknowledgment
                        before this limit is reached is considered a fatal communication failure,
                        and causes the RM session failure.

                        The infrastructure uses the configured back-off algorithm to determine when
                        to retransmit, based on a configured base retransmission time.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            
            <xs:any namespace="##other"
                processContents="lax"
                minOccurs="0"
                maxOccurs="unbounded" />
        </xs:sequence>
        <xs:anyAttribute namespace="##any" processContents="lax" />
    </xs:complexType>

    <xs:complexType name="IntervalCType">
        <xs:sequence />
        <xs:attribute name="Milliseconds" type="xs:unsignedLong" use="required"/>
    </xs:complexType>

    <xs:element name="MaxConcurrentSessions" type="xs:unsignedLong" >
        <xs:annotation>
            <xs:documentation>
                Specifies how many concurrently active RM sessions (measured based
                on inbound RM sequences) the SequenceManager dedicated to the
                WS Endpoint accepts before starting to refuse new requests for
                a sequence creation.
            </xs:documentation>
        </xs:annotation>
    </xs:element>

    <xs:element name="RetransmissionConfig" type="tns:RetransmissionConfigCType" >
        <xs:annotation>
            <xs:documentation>
                Configures message retransmission. See nested elements for details.
            </xs:documentation>
        </xs:annotation>
    </xs:element>

    <xs:element name="CloseSequenceTimeout" type="tns:IntervalCType" >
        <xs:annotation>
            <xs:documentation>
                By default, the call to proxy.close() will not return until all
                messages have been acknowledged. RM close timeout is the interval
                (in milliseconds) that the client runtime will block waiting for
                a call to close() to return. If there are still unacknowledged
                messages after this interval is reached, and the call to close
                has returned, an error will be logged about messages being lost.
            </xs:documentation>
        </xs:annotation>
    </xs:element>

    <xs:element name="MaintenanceTaskPeriod" type="tns:IntervalCType" >
        <xs:annotation>
            <xs:documentation>
                Specifies the period (in milliseconds) of a sequence maintenance
                task execution. Sequence maintenance task takes care of terminating
                inactive sequences and removing the terminated sequences from the
                sequence repository.
            </xs:documentation>
        </xs:annotation>
    </xs:element>

    <xs:element name="AckRequestInterval" type="tns:IntervalCType" >
        <xs:annotation>
            <xs:documentation>
                Defines the suggested minimum time that the sender (RM Source)
                should allow to elapse between sending consecutive Acknowledgement
                request messages to the RM Destination.
            </xs:documentation>
        </xs:annotation>
    </xs:element>

    <xs:element name="Persistent">
        <xs:annotation>
            <xs:documentation>
                Specifies whether the runtime should use persistent message storage
                or not.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:anyAttribute namespace="##other" processContents="lax"/>
        </xs:complexType>
    </xs:element>
</xs:schema>
