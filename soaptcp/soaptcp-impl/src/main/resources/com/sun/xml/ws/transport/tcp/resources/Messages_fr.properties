#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 2010 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
# or packager/legal/LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at packager/legal/LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

# i18n messages for SOAP/TCP code

# Logger error messages
WSTCP0001.MESSAGE_PROCESS_FAILED=WSTCP0001 : \u00E9chec de traitement du message.
WSTCP0002.SERVER_ERROR_MESSAGE_SENDING_FAILED=WSTCP0002 : \u00E9chec de l''envoi d''un message d''erreur au client.
WSTCP0003.TARGET_WS_NOT_FOUND=WSTCP0003 : WS cible introuvable. TargetURI : {0}
WSTCP0004.CHECK_SERVER_LOG=WSTCP0004 : pour plus de d\u00E9tails, consultez le journal du serveur
WSTCP0005.INVALID_EP_URL=WSTCP0005 : URL endpoint non valide : {0}
WSTCP0006.VERSION_MISMATCH=WSTCP0006 : non-concordance des versions.
WSTCP0007.TRANSPORT_MODULE_NOT_INITIALIZED=WSTCP0007 : le module de transport n'a pas \u00E9t\u00E9 initialis\u00E9.
# {0} - qname (of webservice)
WSTCP0008.ERROR_TCP_ADAPTER_CREATE=WSTCP0008 : erreur lors de la cr\u00E9ation de l''adaptateur TCP pour {0}
WSTCP0009.UNKNOWN_BINDING=WSTCP0009 : WSBinding {0} inconnu
WSTCP0010.UNKNOWN_PARAMETER=WSTCP0010 : param\u00E8tre {0} inconnu
WSTCP0011.UNKNOWN_CONTENT_TYPE=WSTCP0011 : content-type {0} inconnu
# Added space between Retry and #. {0} stands for a number. Word "number" can be used instead of # in translation.
WSTCP0012.SEND_RETRY=WSTCP0012 : Sending failed. Retry #{0}
WSTCP0013.TCP_PROCESSOR_NOT_REGISTERED=WSTCP0013 : arriv\u00E9e de la demande TCP WS. Cependant, aucun processeur n'est inscrit.
WSTCP0014.NO_JAXWS_DESCRIPTOR=WSTCP0014 : aucun fichier de descripteur JAX-WS trouv\u00E9
WSTCP0015.ERROR_PROTOCOL_VERSION_EXCHANGE=WSTCP0015 : erreur lors de l'\u00E9change de la version de protocole
WSTCP0016.ERROR_WS_EXECUTION_ON_SERVER=WSTCP0016 : erreur lors de l''ex\u00E9cution du service Web. Erreur de serveur : {0}
WSTCP0017.ERROR_WS_EXECUTION_ON_CLIENT=WSTCP0017 : erreur lors de l'ex\u00E9cution du service Web
WSTCP0018.ERROR_READING_FROM_SOCKET=WSTCP0018 : erreur lors de la lecture \u00E0 partir du socket
WSTCP0019.PEER_DISCONNECTED=WSTCP0019 : homologue d\u00E9connect\u00E9. H\u00F4te : {0}, port : {1}
# Magic number = a constant numerical or text value used to identify a file format or protocol. In this case it is a protocol. When an input stream is opened on a connection there should be a certain string present at the very beginning of this input stream. If it's not there then this error message is raised.
WSTCP0020.WRONG_MAGIC=WSTCP0020 : nombre magique incorrect : {0}
WSTCP0021.TCP_ADAPTER_UNSUPPORTER_OPERATION=WSTCP0021 : op\u00E9ration non prise en charge. Le codec ne peut pas reconna\u00EEtre le type de message de r\u00E9ponse.
WSTCP0022.ERROR_WS_EXECUTION=WSTCP0022 : erreur lors du traitement du message de demande. H\u00F4te client : {0}, port : {1}
WSTCP0023.TARGET_EXEC_ERROR=WSTCP0023 : erreur d''ex\u00E9cution de la cible WS. H\u00F4te client : {0}, port : {1}
WSTCP0024.SERVICE_CHANNEL_EXCEPTION=WSTCP0024 : une exception s''est produite lors de l''ex\u00E9cution de l''op\u00E9ration du service Web de gestion des connexions. ID : {0}, description : {1}
WSTCP0025.GENERAL_CHANNEL_ERROR=WSTCP0025 : erreur g\u00E9n\u00E9rale de canal. {0}
WSTCP0026.UNKNOWN_CHANNEL_ID=WSTCP0026 : identificateur de canal inconnu : {0}
WSTCP0027.MALFORMED_FRAME=WSTCP0027 : format de cadre incorrect. {0}
WSTCP0028.UNKNOWN_MESSAGE_ID=WSTCP0028 : identificateur de message inconnu : {0}
WSTCP0029.INCORRECT_FRAME_SEQ=WSTCP0029 : s\u00E9quence de cadre de message incorrect. {0}
WSTCP0030.INTERLEAVED_FRAME_SEQ=WSTCP0030 : s\u00E9quence de cadre de message intercal\u00E9e. {0}
WSTCP0031.UNKNOWN_REQ_RESP_PATTERN=WSTCP0031 : mod\u00E8le de demande/r\u00E9ponse inconnu. {0}
WSTCP0032.UNEXPECTED_TRANSPORT_SOAP_ACTION=WSTCP0032 : la d\u00E9finition du param\u00E8tre SOAPAction de transport n'est pas attendue. Il n'est pas utilis\u00E9 avec SOAP1.2
WSTCP0033.CONTENT_NEGOTIATION_FAILED=WSTCP0033 : \u00E9chec de la n\u00E9gociation du contenu pour l''adresse WS : {0}. Contenu pris en charge par le serveur : {1}
WSTCP0034.WS_ENDPOINT_NOT_FOUND=WSTCP0034 : le service Web pour l''adresse {0} est introuvable.
WSTCP0035.UNKNOWN_CHANNEL_UD=WSTCP0035 : l''\u00E9l\u00E9ment channel-id {0} n''existe pas.

# Logger debug messages
WSTCP1001.TCP_SERVICE_TP_PROCESS_ENTER=WSTCP1001 : ServiceChannelTransportPipe.process() entering. Target URI: {0}
WSTCP1002.TCP_SERVICE_TP_PROCESS_TRANSPORT_REUSE=WSTCP1002 : ServiceChannelTransportPipe.process() reuse client transport
WSTCP1003.TCP_SERVICE_TP_PROCESS_TRANSPORT_CREATE=WSTCP1003 : ServiceChannelTransportPipe.process() create new client transport
WSTCP1004.TCP_SERVICE_TP_PROCESS_ENCODE=WSTCP1004 : ServiceChannelTransportPipe.process() encode. ContentType: {0}
WSTCP1005.TCP_SERVICE_TP_PROCESS_SEND=WSTCP1005 : ServiceChannelTransportPipe.process() send
WSTCP1006.TCP_SERVICE_TP_PROCESS_OPEN_PREPARE_READING=WSTCP1006 : ServiceChannelTransportPipe.process() prepare reading
WSTCP1007.TCP_SERVICE_TP_PROCESS_OPEN_PROCESS_READING=WSTCP1007 : ServiceChannelTransportPipe.process() process reading. Status: {0}, ContentType: {1}

WSTCP1010.TCP_TP_PROCESS_ENTER=WSTCP1010 : TCPTransportPipe.process() entering. Target URI: {0}
WSTCP1011.TCP_TP_PROCESS_TRANSPORT_CREATE=WSTCP1011 : TCPTransportPipe.process() create new client transport
WSTCP1012.TCP_TP_PROCESS_TRANSPORT_REUSE=WSTCP1012 : TCPTransportPipe.process() reuse client transport
WSTCP1013.TCP_TP_PROCESS_ENCODE=WSTCP1013 : TCPTransportPipe.process() encode. ContentType: {0}
WSTCP1014.TCP_TP_PROCESS_SEND=WSTCP1014 : TCPTransportPipe.process() send
WSTCP1015.TCP_TP_PROCESS_OPEN_PREPARE_READING=WSTCP1015 : TCPTransportPipe.process() prepare reading
WSTCP1016.TCP_TP_PROCESS_OPEN_PROCESS_READING=WSTCP1016 : TCPTransportPipe.process() process reading. Status: {0}, ContentType: {1}

WSTCP1020.CONNECTION_CACHE_ENTER=WSTCP1020 : WSConnectionCache.lockConnection entering
WSTCP1021.CONNECTION_CACHE_SYNC=WSTCP1021 : WSConnectionCache.lockConnection inside sync
WSTCP1022.CONNECTION_CACHE_LOCK=WSTCP1022 : WSConnectionCache.lockConnection lock
WSTCP1023.CONNECTION_CACHE_SESSION_ABORTED=WSTCP1023 : WSConnectionCache.lockConnection session aborted

WSTCP1030.CONNECTION_MANAGER_ENTER=WSTCP1030 : WSConnectionManager.openChannel entering URI: {0}, Service: {1}, Binding: {2}, Codec: {3}
WSTCP1031.CONNECTION_MANAGER_USE_OPENED_SESSION=WSTCP1031 : WSConnectionManager.openChannel Use opened session
WSTCP1032.CONNECTION_MANAGER_OFFER_SESSION_FOR_REUSE=WSTCP1032 : WSConnectionManager.openChannel Offer session for reuse
WSTCP1033.CONNECTION_MANAGER_RETURN_CHANNEL_CONTEXT=WSTCP1033 : WSConnectionManager.openChannel Return channelContext Id: {0}
WSTCP1034.CONNECTION_MANAGER_CREATE_SESSION_ENTER=WSTCP1034 : WSConnectionManager.createConnectionSession entering URI: {0}
WSTCP1035.CONNECTION_MANAGER_INITIATE_SESSION=WSTCP1035 : WSConnectionManager.createConnectionSession call ServiceWS.initiateSession
WSTCP1036.CONNECTION_MANAGER_DO_OPEN_CHANNEL_ENTER=WSTCP1036 : WSConnectionManager.doOpenChannel enter
WSTCP1037.CONNECTION_MANAGER_DO_OPEN_WS_CALL=WSTCP1037 : WSConnectionManager.doOpenChannel call ServiceWS.openChannel targetURI: {0} \nnegotiatingMimeTypes: {1} \nnegotiatingParams: {2}
WSTCP1038.CONNECTION_MANAGER_DO_OPEN_PROCESS_SERVER_SETTINGS=WSTCP1038 : WSConnectionManager.doOpenChannel serverSettings: {0}
WSTCP1039.CONNECTION_MANAGER_DO_OPEN_REGISTER_CHANNEL=WSTCP1039 : WSConnectionManager.doOpenChannel register channel Id: {0}
WSTCP1040.CONNECTION_MANAGER_DO_CHECK_VERSION_ENTER=WSTCP1040 : WSConnectionManager.doCheckVersions enter framingVersion: {0} connectionMngmntVersion: {1}
WSTCP1041.CONNECTION_MANAGER_DO_CHECK_VERSION_SENT=WSTCP1041 : WSConnectionManager.doCheckVersions version sent
WSTCP1043.CONNECTION_MANAGER_NOTIFY_SESSION_CLOSE=WSTCP1043 : Session URI: {0} was closed
WSTCP1044.CONNECTION_MANAGER_CLIENT_SIDE_CONNECTION_CACHE=WSTCP1044 : SOAP/TCP client side connection cache settings. HighWaterMark: {0}, MaxParallelConnections: {1}, NumberToReclaim: {2}

WSTCP1050.CONNECTION_BUFFERING_IS=WSTCP1050 : Connection.prepareForReading Buffering Connection.InputStream. Size: {0}
WSTCP1051.CONNECTION_OPEN_TCP_SOCKET=WSTCP1051 : Connection.create Opening connection host: {0} port: {1}

WSTCP1060.FRAMED_MESSAGE_IS_READ_HEADER_ENTER=WSTCP1060 : FramedMessageInputStream.readHeader
WSTCP1061.FRAMED_MESSAGE_IS_READ_HEADER_DONE=WSTCP1061 : FramedMessageInputStream.readHeader done. channelId: {0}, messageId: {1}, content-id: {2}, content-params: {3}, currentFrameDataSize: {4}, isLastFrame: {5}
WSTCP1062.FRAMED_MESSAGE_IS_READ_UNEXPECTED_EOF=WSTCP1062 : EOF inattendue. isLastFrame : {0}, frameBytesRead : {1}, frameSize : {2}, currentFrameDataSize : {3}

WSTCP1070.OUTPUT_WRITER_DUMP=WSTCP1070 : Output dump to host: {0} port: {1}:

WSTCP1080.INCOME_MSG_PROC_ENTER=WSTCP1080 : Start processing incoming request from host: {0} port: {1}:
WSTCP1081.INCOME_MSG_CREATE_NEW_SESSION=WSTCP1081 : Create new ConnectionSession
WSTCP1082.INCOME_MSG_VERSION_CHECK_ENTER=WSTCP1082 : entering
WSTCP1083.INCOME_MSG_VERSION_CHECK_RESULT=WSTCP1083 : Version check clientFramingVersion: {0}, clientConnectionMngmntVersion: {1}, serverFramingVersion: {2}, serverConnectionMngmntVersion: {3}, successCode: {4}
WSTCP1084.INCOME_MSG_SERVER_SIDE_CONNECTION_CACHE=WSTCP1084 : SOAP/TCP server side connection cache settings. HighWaterMark: {0}, NumberToReclaim: {1}

WSTCP1090.TCP_ADAPTER_REQ_CONTENT_TYPE=WSTCP1090 : Request contentType {0}
WSTCP1091.TCP_ADAPTER_DECODED=WSTCP1091 : Decoded
WSTCP1092.TCP_ADAPTER_RPL_CONTENT_TYPE=WSTCP1092 : Reply contentType: {0}
WSTCP1093.TCP_ADAPTER_ONE_WAY=WSTCP1093 : One way message
WSTCP1094.TCP_ADAPTER_CLOSE=WSTCP1094 : close() callback method is called. Message in oneway
WSTCP1095.TCP_ADAPTER_WRITE_INTERNAL_SERVER_ERROR=WSTCP1095 : writeInternalServerError() called.

WSTCP1100.WSTCP_DELEGATE_DEREGISTER_ADAPTER=WSTCP1100 : Deregister adapter. URL: {0}
WSTCP1101.WSTCP_DELEGATE_REGISTER_ADAPTER=WSTCP1101 : Register adapter. URL: {0}
WSTCP1102.WSTCP_DELEGATE_GOING_TO_CUSTOM_REG=WSTCP1102 : Going to custom registry URL: {0}
WSTCP1103.WSTCP_DELEGATE_ON_MESSAGE=WSTCP1103 : OnMessage host: {0}, port: {1}, localHost: {2}, localPort: {3}
WSTCP1104.WSTCP_DELEGATE_ON_MESSAGE_COMPLETED=WSTCP1104 : OnMessage completed
WSTCP1105.WSTCP_DELEGATE_DESTROY=WSTCP1105 : destroy

WSTCP1110.APP_SERV_REG_REGISTER_ENDPOINT=WSTCP1110 : Register endpoint. ServiceName: {0} path: {1} isEJB: {2}
WSTCP1111.APP_SERV_REG_DEREGISTER_ENDPOINT=WSTCP1111 : Deregister endpoint. ServiceName: {0} path: {1} isEJB: {2}
WSTCP1112.APP_SERV_REG_GET_ENDP_CR_NON_EJB=WSTCP1112 : EndpointContextRoot nonEJB WS. ContextRoot: {0}
WSTCP1113.APP_SERV_REG_GET_ENDP_CR_EJB=WSTCP1113 : EndpointContextRoot EJB WS. ContextRoot: {0}
WSTCP1114.APP_SERV_REG_GET_ENDP_URL_PATTERN_NON_EJB=WSTCP1114 : EndpointUrlPattern nonEJB WS. URLPattern: {0}
WSTCP1115.APP_SERV_REG_GET_ENDP_URL_PATTERN_EJB=WSTCP1115 : EndpointUrlPattern EJB WS. URLPattern: {0}
WSTCP1116.APP_SERV_REG_GET_WS_ENDP_PATH_NON_EJB=WSTCP1116 : WebServiceEndpointPath nonEJB WS. Path: {0}
WSTCP1117.APP_SERV_REG_GET_WS_ENDP_PATH_EJB=WSTCP1117 : WebServiceEndpointPath EJB WS. Path: {0}

WSTCP1120.CHANNEL_CONTEXT_ENCODE_CT=WSTCP1120 : Encode content type: {0}
WSTCP1121.CHANNEL_CONTEXT_ENCODED_CT=WSTCP1121 : Encoded mimeId: {0} params: {1}
WSTCP1122.CHANNEL_CONTEXT_DECODE_CT=WSTCP1122 : mimeId: {0} params: {1}
WSTCP1123.CHANNEL_CONTEXT_DECODED_CT=WSTCP1123 : Decoded content type: {0}

WSTCP1130.CONNECTION_MNGMNT_SETTINGS_LOADED=WSTCP1130 : Custom SOAP/TCP connection settings loaded. HighWaterMark: {0}, MaxParallelConnections: {1}, NumberToReclaim: {2}

WSTCP1140.SOAPTCP_SESSION_OPEN=WSTCP1140 : Session: {0} opened
# {1} - channel ID (it's a number), you can translate # as "number"
WSTCP1141.SOAPTCP_CHANNEL_OPEN=WSTCP1141 : Session: {0}. Channel #{1} was opened for WS: {2}
# {1} - channel ID (it's a number), you can translate # as "number"
WSTCP1142.SOAPTCP_CHANNEL_CLOSE=WSTCP1142 : Session: {0}. Channel #{1} was closed

WSTCP1150.CON_MNGMNT_SETTINGS_POLICY=WSTCP1150 : Policy based ConnectionManagementSettings holder is taken
WSTCP1151.CON_MNGMNT_SETTINGS_SYST_PROPS=WSTCP1151 : System properties based ConnectionManagementSettings holder is taken

WSTCP1160.PORT_ATTR_INVALID_VALUE=WSTCP1160 : valeur de port SOAP/TCP non valide : {0}. La valeur sera d\u00E9finie par le runtime
WSTCP1161.ADD_PORT_ATTR_INIT_FAIL=WSTCP1161 : une exception inattendue s'est produite lors de la tentative d'initialisation de l'appel writeAttribute
WSTCP1162.UNSUPPORTED_PORT_ATTRIBUTE=WSTCP1162 : SOAP/TCP n'a pas son propre processus d'\u00E9coute TCP, le runtime SOAP/TCP ne peut donc pas d\u00E9finir l'attribut 'port' valide. L'attribut 'port' n'est pas pris en compte

WSTCP1170.INIT_SOAPTCP=Initialisation de SOAP/TCP sur le port {0}
WSTCP1171.START_SOAPTCP_LISTENER=D\u00E9marrage de SOAP/TCP
WSTCP1172.PAUSE_SOAPTCP_LISTENER=Mise en attente de SOAP/TCP
WSTCP1173.RESUME_SOAPTCP_LISTENER=Reprise de SOAP/TCP
WSTCP1174.TOMCAT_SOAPTCP_LISTENER=Processus d''\u00E9coute SOAP/TCP Tomcat sur le port {0}

# Standalone run messages
WSTCP2000.STANDALONE_EXCEPTION=WSTCP2000 : exception lors de l'ex\u00E9cution autonome.
WSTCP2001.STANDALONE_ADAPTER_REGISTERED=WSTCP2001 : Adapter: "{0}" with url-pattern "{1}" is registered.
WSTCP2002.STANDALONE_ADAPTER_NOT_REGISTERED=WSTCP2002 : l''adaptateur "{0}" avec l''url-pattern "{1}" n''est pas inscrit.

# Console messages (development only)
STANDALONE_RUN=Ex\u00E9cuter WSTCP <WS_CONTEXT_ROOT> [-enableProtocolCheck]
STANDALONE_EXIT=Appuyez sur Entr\u00E9e pour quitter
